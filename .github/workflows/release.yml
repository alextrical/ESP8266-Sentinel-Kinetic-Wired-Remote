# This workflow generates documentation (PDFs, interactive BOMs, board images) and fabrication
# files for JLCPCB and PCBWay. The version number and date of the design is automatically
# updated in the schematic file and on the PCB based on the GitHub release version and date.

# To use this workflow in your own repo you need to edit the environment variables in the env: section
# below.
name: "KiBot - Release"

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Design version"
        required: true
        default: "pre-release"

env:
  # Set this to your local timezone. See https://www.wikiwand.com/en/List_of_tz_database_time_zones for valid strings.
  Timezone: America/New_York
  # Set this to the output folder for all of the generated files. Unless you have a very
  # good reason to change this you should leave it as KiBotOutput.
  OutputFolder: KiBotOutput

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  setup-panel-array:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Define Array
        id: set-matrix
        run: |
          # Define an array with pairs of values (JSON format)
          echo "matrix=[ \
          {\"PANEL_ROW\":\"1\",\"PANEL_COL\":\"1\",\"PANEL_ROT\":\"45\",\"PANEL_PREV\":\"true\",\"PANEL_FAB\":\"MINEWING\"},  \
          {\"PANEL_ROW\":\"2\",\"PANEL_COL\":\"2\",\"PANEL_ROT\":\"45\",\"PANEL_PREV\":\"true\",\"PANEL_FAB\":\"MINEWING\"},  \
          {\"PANEL_ROW\":\"3\",\"PANEL_COL\":\"3\",\"PANEL_ROT\":\"45\",\"PANEL_PREV\":\"true\",\"PANEL_FAB\":\"MINEWING\"},  \
          {\"PANEL_ROW\":\"2\",\"PANEL_COL\":\"2\",\"PANEL_ROT\":\"45\",\"PANEL_PREV\":\"true\",\"PANEL_FAB\":\"UcreatePCB\"},  \
          {\"PANEL_ROW\":\"2\",\"PANEL_COL\":\"2\",\"PANEL_ROT\":\"45\",\"PANEL_PREV\":\"true\",\"PANEL_FAB\":\"JLCPCB\"}  \
          ]" >> $GITHUB_OUTPUT

        # {\"PANEL_ROW\":\"1\",\"PANEL_COL\":\"1\",\"PANEL_ROT\":\"0\",\"PANEL_PREV\":\"true\",\"PANEL_FAB\":\"JLCPCB\"}, \
        # {\"PANEL_ROW\":\"2\",\"PANEL_COL\":\"1\",\"PANEL_ROT\":\"0\",\"PANEL_PREV\":\"true\",\"PANEL_FAB\":\"JLCPCB\"}, \

  FabricationAndDocumentation:
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto:latest  # Don't Change, except if needing older version of KiCad.

    # These are all the steps that generate the files.
    steps:
      # Check out the files
    - uses: actions/checkout@v4
      # Check out the submodules
    - name: Checkout submodules
      uses: actions/checkout@v4
      with:
        repository: FutureProofHomes/Kicad-Libraries
        token: ${{ secrets.ORG_WIDE_READ_TOKEN }}
        path: Kicad-Libraries
        persist-credentials: true

    # Get the version of the GitHub release for use later. This is only valid
    # when run in a release context
    - name: Store GitHub release version
      id: save_github_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        echo "VERSION=${GITHUB_REF#refs/*/}"
      #  echo "${GITHUB_REF_NAME#v}"
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash

    # Get the version from the workflow input. This is only valid
    # when run manually as a workflow.
    - name: Store workflow version
      id: save_workflow_version
      run: echo "VERSION=${{ github.event.inputs.VERSION }}" >> $GITHUB_ENV
      if: startsWith(github.ref, 'refs/tags/') == false
      shell: bash

    # Get the current GitHash
    - name: Set GitHash
      id: gitHash
      run: |
        if [${{ github.event.pull_request.head.sha }} == ""]; then
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" | tr a-z A-Z >> $GITHUB_ENV
        else
          echo "SHA_SHORT=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" | tr a-z A-Z >> $GITHUB_ENV
        fi
      shell: bash

    # Run KiBot to generate all the files. The KiBot script used is
    # in the .github/kibot/release.kibot.yaml folder.
    - name: Generate documentation
      run: |
        kibot \
        --out-dir ${{ env.OutputFolder }} \
        --schematic "${{ github.event.repository.name }}.kicad_sch" \
        --board-file "${{ github.event.repository.name }}.kicad_pcb" \
        --plot-config .github/kibot/release.kibot.yaml \
        -E SHA_SHORT="${{ env.SHA_SHORT }}" \
        -E VERSION="${{ env.VERSION }}"

    # Run KiBot to generate all the files. The KiBot script used is
    # in the .github/kibot/release.kibot.yaml folder.
    - name: Generate single board fabrication files for JLCPCB
      run: |
        kibot \
        --out-dir ${{ env.OutputFolder }} \
        --schematic "${{ github.event.repository.name }}.kicad_sch" \
        --board-file "${{ github.event.repository.name }}.kicad_pcb" \
        --plot-config .github/kibot/fabricate_JLCPCB.kibot.yaml \
        -E SHA_SHORT="${{ env.SHA_SHORT }}" \
        -E VERSION="${{ env.VERSION }}"

    # Upload all the zip files to the release. 
    - name: Upload release files
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          ${{ env.OutputFolder }}/${{ github.event.repository.name }}-*.zip

    # Attach the archives used for a release, to the action's results.
    # This is so they're made available when this workflow is run manually from the
    # GitHub actions page.
    - name: Preview release_files
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}_release_files_${{ env.SHA_SHORT }}
        path: |
          ${{ env.OutputFolder }}/${{ github.event.repository.name }}-*.zip
        if-no-files-found: warn

    # # Archive all the artifacts from output and attach to the action's results.
    # - name: debug artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ github.event.repository.name }}_debug_${{ env.SHA_SHORT }}
    #     path: |
    #       ${{ env.OutputFolder }}/**
    #     if-no-files-found: warn
        
  panelize:
    needs: setup-panel-array
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto:latest  # Don't Change, except if needing older version of KiCad.
    strategy:
      matrix:
        pair: ${{ fromJson(needs.setup-panel-array.outputs.matrix) }}
    steps:
        # Check out the files
      - uses: actions/checkout@v4
        # Check out the submodules
      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          repository: FutureProofHomes/Kicad-Libraries
          token: ${{ secrets.ORG_WIDE_READ_TOKEN }}
          path: Kicad-Libraries
          persist-credentials: true

      # Get the version of the GitHub release for use later. This is only valid
      # when run in a release context
      - name: Store GitHub release version
        id: save_github_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF#refs/*/}"
        #  echo "${GITHUB_REF_NAME#v}"
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash

      # Get the version from the workflow input. This is only valid
      # when run manually as a workflow.
      - name: Store workflow version
        id: save_workflow_version
        run: echo "VERSION=${{ github.event.inputs.VERSION }}" >> $GITHUB_ENV
        if: startsWith(github.ref, 'refs/tags/') == false
        shell: bash

      # Get the current GitHash
      - name: Set GitHash
        id: gitHash
        run: |
          if [${{ github.event.pull_request.head.sha }} == ""]; then
            echo "SHA_SHORT=$(git rev-parse --short HEAD)" | tr a-z A-Z >> $GITHUB_ENV
          else
            echo "SHA_SHORT=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" | tr a-z A-Z >> $GITHUB_ENV
          fi
        shell: bash

      - name: Generate documentation and fabrication files
        run: |
          kibot \
          --out-dir ${{ env.OutputFolder }} \
          --schematic "${{ github.event.repository.name }}.kicad_sch" \
          --board-file "${{ github.event.repository.name }}.kicad_pcb" \
          --plot-config .github/kibot/panelize.kibot.yaml \
          -E PANEL_COL=${{ matrix.pair.PANEL_COL }} \
          -E PANEL_ROW=${{ matrix.pair.PANEL_ROW }} \
          -E PANEL_ROT=${{ matrix.pair.PANEL_ROT }} \
          -E PANEL_PREV=${{ matrix.pair.PANEL_PREV }} \
          -E SHA_SHORT="${{ env.SHA_SHORT }}" \
          -E VERSION="${{ env.VERSION }}"

      - name: Generate ${{ matrix.pair.PANEL_ROW }}x${{ matrix.pair.PANEL_COL }} pannel fabrication files
        run: |
          kibot \
          --out-dir "${{ env.OutputFolder }}/panel_${{ matrix.pair.PANEL_ROW }}x${{ matrix.pair.PANEL_COL }}" \
          --schematic "${{ github.event.repository.name }}.kicad_sch" \
          --board-file "${{ env.OutputFolder }}/Panel_${{ matrix.pair.PANEL_ROW }}x${{ matrix.pair.PANEL_COL }}/${{ github.event.repository.name }}-${{ matrix.pair.PANEL_ROW }}x${{ matrix.pair.PANEL_COL }}-panel.kicad_pcb" \
          --plot-config .github/kibot/fabricate_${{ matrix.pair.PANEL_FAB }}.kibot.yaml

      # Upload all the zip files to the release. 
      - name: Upload release files
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') #only when run as a release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ${{ env.OutputFolder }}/panel*/${{ github.event.repository.name }}-*.zip

      # Attach the archives used for a release, to the action's results.
      # This is so they're made available when this workflow is run manually from the
      # GitHub actions page.
      - name: Preview release_files
        uses: actions/upload-artifact@v4
        if: startsWith(github.ref, 'refs/tags/') == false #only when NOT run as a release
        with:
          name: ${{ matrix.pair.PANEL_FAB }}_panel_${{ matrix.pair.PANEL_ROW }}x${{ matrix.pair.PANEL_COL }}_${{ env.SHA_SHORT }}
          path: |
            ${{ env.OutputFolder }}/panel*/${{ github.event.repository.name }}-*.zip
          if-no-files-found: warn

      # # Archive all the artifacts from output and attach to the action's results.
      # - name: debug artifacts
      #   uses: actions/upload-artifact@v4
      #   if: startsWith(github.ref, 'refs/tags/') == false #only when NOT run as a release
      #   with:
      #     name: debug_${{ matrix.pair.PANEL_FAB }}_panel_${{ matrix.pair.PANEL_ROW }}x${{ matrix.pair.PANEL_COL }}_${{ env.SHA_SHORT }}
      #     path: |
      #       ${{ env.OutputFolder }}/**
      #     if-no-files-found: warn



          