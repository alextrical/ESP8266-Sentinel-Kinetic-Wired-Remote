name: "KiBot - Generate Renders"

# Controls when the action will run.
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Design version"
        required: true
        default: "pre-release"

env:
  # Set this to your local timezone. See https://www.wikiwand.com/en/List_of_tz_database_time_zones for valid strings.
  Timezone: America/New_York
  # Set this to the output folder for all of the generated files. Unless you have a very
  # good reason to change this you should leave it as KiBotOutput.
  OutputFolder: KiBotOutput

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  CreateRenders:
    name: "Create Renders"
    runs-on: ubuntu-latest
    container: ghcr.io/inti-cmnb/kicad9_auto_full:latest  # Don't Change, except if needing older version of KiCad.

    steps:
    - uses: actions/checkout@v4
    - name: Checkout submodules
      uses: actions/checkout@v4
      with:
        repository: FutureProofHomes/Kicad-Libraries
        token: ${{ secrets.ORG_WIDE_READ_TOKEN }}
        path: Kicad-Libraries
        persist-credentials: true

    # - name: Set variables in files
    #   id: SetOutputStrings
    #   uses: ./.github/actions/setOutputStrings #relative
    # # - uses: my-org/my-repo/.github/actions/setOutputStrings@main #absolute

    # Get the version of the GitHub release for use later. This is only valid
    # when run in a release context
    - name: Store GitHub release version
      id: save_github_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        echo "VERSION=${GITHUB_REF#refs/*/}"
      #  echo "${GITHUB_REF_NAME#v}"
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash

    # Get the version from the workflow input. This is only valid
    # when run manually as a workflow.
    - name: Store workflow version
      id: save_workflow_version
      run: |
        echo "version=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        echo "version=${{ github.event.inputs.version }}"
      if: startsWith(github.ref, 'refs/tags/') == false
      shell: bash

    # Get the current GitHash
    - name: Set GitHash
      id: gitHash
      run: |
        if [${{ github.event.pull_request.head.sha }} == ""]; then
          echo "sha_short=$(git rev-parse --short HEAD)" | tr a-z A-Z >> $GITHUB_ENV
        else
          echo "sha_short=$(git rev-parse --short ${{ github.event.pull_request.head.sha }})" | tr a-z A-Z >> $GITHUB_ENV
        fi
      shell: bash

    # # Run KiBot to generate the renderfiles. The KiBot script used is
    # # in the .github/kibot/render.kibot.yaml folder.
    # - uses: INTI-CMNB/KiBot@v2_dk9
    #   name: Generate render files
    #   with:
    #     dir: ${{ env.OutputFolder }}
    #     # variant: default
    #     # skip: erc,drc
    #     config: .github/kibot/render.kibot.yaml
    #     # optional - schematic file
    #     schema: "${{ github.event.repository.name }}.kicad_sch"
    #     # optional - PCB design file
    #     board: "${{ github.event.repository.name }}.kicad_pcb"

    # Run KiBot to generate the render files. The KiBot script used is
    # in the .github/kibot/render.kibot.yaml folder.
    - name: Generate render files
      run: |
        kibot \
        --out-dir ${{ env.OutputFolder }} \
        --schematic "${{ github.event.repository.name }}.kicad_sch" \
        --board-file "${{ github.event.repository.name }}.kicad_pcb" \
        --plot-config .github/kibot/render.kibot.yaml \
        -E SHA_SHORT="${{ env.SHA_SHORT }}" \
        -E VERSION="${{ env.VERSION }}"


    - name: upload results
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}_renders
        path: ${{ env.OutputFolder }}
        if-no-files-found: warn